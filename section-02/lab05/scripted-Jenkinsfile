def label = "my_channel-${UUID.randomUUID().toString()}"

/* -------- functions ---------- */
def notifySlack(STATUS, COLOR) {
	slackSend (channel: '#my_channel', color: COLOR, message: STATUS+" : " +  "${env.JOB_NAME} [${env.BUILD_NUMBER}] (${env.BUILD_URL})")
}
/* ------------------------------ */

notifySlack("STARTED", "#FFFF00")

podTemplate(
	containers: [
		containerTemplate(name: 'maven', image: 'maven:3.8.1-jdk-8', command: 'sleep', args: '99d'),
		containerTemplate(name: "docker", image: "docker:latest", ttyEnabled: true, command: "cat"),
		containerTemplate(name: "kubectl", image: "lachlanevenson/k8s-kubectl", command: "cat", ttyEnabled: true),
		containerTemplate(name: "scanner", image: "newtmitch/sonar-scanner", ttyEnabled: true, command: "cat"),
		containerTemplate(name: 'podman', image: 'ibmcase/podman:ubuntu-16.04', ttyEnabled: true, command: 'cat', privileged: true)    
	],
  //volume mount
  volumes: [
		//nfsVolume(mountPath: "/root/.m2", serverAddress: '169.56.100.99', serverPath: '/data/srv/nfs/.m2', readOnly: false)
    hostPathVolume(mountPath: '/root/.m2', hostPath: '/root/.m2')
  ]) {
		node(POD_LABEL) {
			properties([
				buildDiscarder(logRotator(daysToKeepStr: '7', numToKeepStr: '10'))
			])
			
			stage('Get a Maven project') {
				git url: 'https://gitlab.com/nexweb/jenkins-handson.git', branch: 'dev'
			}
	
			stage('Read Properties') {
				// Docker Hub Info.
				def props = readProperties  file:"deployment/pipeline.properties"
				env['tag'] = props["version"]
				env['dockerRegistry'] = props["dockerRegistry"]
				env['credentialRegistry']=props["credentialRegistry"]
				env['image'] = props["image"]

				// base Directory
				env['baseDir'] = props["baseDir"]
				env['baseDeployDir'] = props["baseDeployDir"]
	
				// commit and push
				def ws = "${WORKSPACE}"
				env['credentialGit']=props["credentialGit"]
				env['user'] = props["username"]
				env['email'] = props["email"]

				env['imageShortName'] = props["imageShortName"]
				env['deployment'] = props["deployment"]
				env['gitRepositoryUrl'] = props["gitRepositoryUrl"]
				env['commitMessage'] = props["commitMessage"]
				env['WS'] = ws
			}

		try {
			// Build Source from Repository in gitlab
			stage('Build maven project') {
				echo "**** START : Build maven project"
				def _dir = pwd();
				echo "path : ${_dir}"
				echo "baseDir : ${baseDir}"
				echo "baseDeployDir : ${baseDeployDir}"
				sh "ls -al"
				container('maven') {
					sh "mvn -B -f ${baseDir} clean package -Dmaven.testSkips=true "
					echo "*** RESULT ***"
					sh "pwd"
					sh "ls -al ${baseDir}/target"
				}
			}

			// Build Docker, Push Image to Docker Hub Repository.
			stage("Build Microservice image") {
				IMAGE_TAG =  sh(script: 'echo "dev-$BUILD_NUMBER"', returnStdout: true).trim()                      
				env['IMAGE_TAG'] = IMAGE_TAG
	
				container("podman") {
					withCredentials([
						usernamePassword(
							credentialsId: "${credentialRegistry}",
							usernameVariable: 'DOCKER_HUB_USER',
							passwordVariable: 'DOCKER_HUB_PASSWORD'
						)
					]) 
					{
						sh "podman login --tls-verify=false --username ${DOCKER_HUB_USER} --password ${DOCKER_HUB_PASSWORD} ${dockerRegistry}"
						sh "podman build -f ./deployment/Dockerfile -t ${image}:${IMAGE_TAG} ."
						sh "podman push ${image}:${IMAGE_TAG}"
					}
				}
			}

			stage('Clone the manifest from git') {
				git url: 'https://gitlab.com/nexweb/deploy-sample-service.git', branch: 'dev'
			}

			stage( "Update manifest" ) {
				withCredentials([
					usernamePassword(
						credentialsId: "${credentialGit}",
						usernameVariable: 'GIT_USER',
						passwordVariable: 'GIT_PASSWORD'
					)
				]) 
				{            
					sh("""
						echo "workspace: ${WS}, ${WORKSPACE}"
						git config --global user.name "${user}"
						git config --global user.email "${email}"
						git config --global --add safe.directory "${WS}"
						echo "Image tag : ${IMAGE_TAG}"
						echo 
						echo "Credentials => ${GIT_USER}:${GIT_PASSWORD}"
						sed -i 's/$imageShortName:.*/$imageShortName:$IMAGE_TAG/g' "${deployment}"
						cat "${deployment}" | grep image

						git add "${deployment}"
						git commit -m "${commitMessage}:$IMAGE_TAG"
						git push "https://$GIT_USER:$GIT_PASSWORD@${gitRepositoryUrl}"
					""")
				} 
			}

			echo "**** FINISH ALL STAGES : SUCCESS"
			echo "**** Success NotifySlack"	
			notifySlack("${currentBuild.currentResult}", "#00FF00")
		} catch(e) {
			currentBuild.result = "FAILED"
			notifySlack("${currentBuild.currentResult}", "#FF0000")
			//notifyMail("${currentBuild.currentResult}", "${email_recipients}")
		}	
  }
}

